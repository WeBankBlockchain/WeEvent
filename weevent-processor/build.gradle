apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    // spring boot
    implementation("org.springframework.boot:spring-boot-starter")

    implementation("org.springframework.boot:spring-boot-starter-web")

    // spring boot with log4j2
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    // avoid "Log4j appears to be running in a Servlet environment, but there's no log4j-web module available."
    implementation("org.apache.logging.log4j:log4j-web:${log4jVersion}")

    implementation("org.apache.commons:commons-dbcp2:${apacheCommonsVersion.dbcp2}")
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}")
    implementation("org.mariadb.jdbc:mariadb-java-client:${mariadbClientVersion}")

    // discovery
    implementation("org.springframework.cloud:spring-cloud-starter-zookeeper-discovery") {
        exclude group: "commons-logging", module: "commons-logging"
    }

    implementation("org.apache.tomcat:tomcat-jdbc:${tomcatVersion}")

    implementation("org.apache.commons:commons-pool2:${apacheCommonsVersion.pool2}")

    implementation("org.apache.commons:commons-jexl3:${apacheCommonsVersion.jexl3}")

    implementation("org.springframework:spring-context-support:${spring5Version}")
    // https://mvnrepository.com/artifact/org.quartz-scheduler/quartz
    implementation("org.quartz-scheduler:quartz:${quartzVersion}")


    //h2
    implementation("com.h2database:h2:${h2Version}")

    implementation(project(":weevent-client"))

    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

bootJar {
    destinationDir file("dist/apps")
    archiveName project.name + "-" + version + ".jar"

    // thin spring boot jar
    excludes = ["*.jar"]

    doLast {
        copy {
            from file("src/main/resources/")
            into "dist/conf"
        }
        copy {
            from configurations.runtimeClasspath
            into "dist/lib"
        }
    }
}
