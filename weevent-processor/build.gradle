apply from: "${project.rootDir}/config.gradle"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

dependencies {
    implementation project(path: ":weevent-client")
    // spring boot
    implementation("org.springframework.boot:spring-boot-starter:${springBoot2Version}")

    implementation("org.springframework.boot:spring-boot-starter-web:${springBoot2Version}")


    // spring boot with log4j2
    implementation("org.springframework.boot:spring-boot-starter-log4j2:${springBoot2Version}")

    // avoid "Log4j appears to be running in a Servlet environment, but there's no log4j-web module available."
    implementation("org.apache.logging.log4j:log4j-web:${logging2Version.log4j_web}")

    implementation("org.apache.commons:commons-dbcp2:${commons2Version.dbcp2}")
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatis2Version}")
    implementation("org.mariadb.jdbc:mariadb-java-client:${mariadb2Version}")


    implementation("org.apache.tomcat:tomcat-jdbc:${tomcat2Version}")


    //fastjson
    implementation("com.alibaba:fastjson:1.2.58")

    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBoot2Version}")

    implementation("org.apache.commons:commons-pool2:${commons2Version.pool2}")

    implementation("org.apache.commons:commons-jexl3:${commons2Version.jexl3}")

    implementation("org.springframework:spring-context-support:${spring2Version.context_support}")
    // https://mvnrepository.com/artifact/org.quartz-scheduler/quartz
    implementation("org.quartz-scheduler:quartz:${quartz2Version}")
}

bootJar {
    destinationDir file("dist/apps")
    archiveName project.name + "-" + version + ".jar"

    // thin spring boot jar
    excludes = ["*.jar"]

    doLast {
        copy {
            from file("src/main/resources/")
            into "dist/conf"
        }
        copy {
            from configurations.runtimeClasspath
            into "dist/lib"
        }
    }
}
//mybatis generator plugin ------ start
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.arenagod.gradle:mybatis-generator-plugin:${mybatisGeneratorPlugin2Version}"
    }
}

apply plugin: "com.arenagod.gradle.MybatisGenerator"

configurations {
    mybatisGenerator
}

mybatisGenerator {
    verbose = true
    configFile = 'src/main/resources/tools/generatorConfig.xml'
}
