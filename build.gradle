println("Notice: current gradle version is " + gradle.gradleVersion + ", WeEvent support gradle version in [4.10, 5.0)")

buildscript {
    apply from: "${project.rootDir}/config.gradle"
    repositories {
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenLocal()
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBoot2Version}")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:${gradleGitProperties2Version}")
    }
}

List lombok = [
        "org.projectlombok:lombok:${lombok2Version}"
]

allprojects {
    group "com.webank.weevent"
    version "1.1.0"

    apply plugin: "java"
    apply plugin: "maven"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "jacoco"

    // jdk version
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava {
        options.compilerArgs << "-Xlint:unchecked"
    }

    repositories {
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        // "org.ethereum.solcJ-all-0.4.25"
        // maven { url "https://dl.bintray.com/ethereum/maven/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenLocal()
        mavenCentral()
    }

    // encoding type
    [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

    sourceSets {
        main {
            java {
                srcDirs = ["src/main/java"]
            }
            resources {
                srcDirs = ["src/main/resources"]
            }
        }
        test {
            java {
                srcDirs = ["src/test/java"]
            }
            resources {
                srcDirs = ["src/test/resources"]
            }
        }
    }

    clean.doLast {
        file("dist/apps/").deleteDir()
        file("dist/conf/").deleteDir()
        file("dist/lib/").deleteDir()
    }

    configurations.all {
        // exclude spring-boot's default logger logback
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"

        resolutionStrategy {
            // fix security bug
            force "com.alibaba:fastjson:${fastjson2Version}"
            // force use netty 4.1
            force "io.netty:netty-all:${netty2Version}"
        }
    }

    // all project common lib
    dependencies {
        compileOnly(lombok)
        annotationProcessor(lombok)

        // apache commons
        implementation("org.apache.commons:commons-lang3:${commons2Version.lang3}")
        implementation("org.apache.commons:commons-collections4:${commons2Version.collections4}")

        // slf4j logger
        implementation("org.slf4j:slf4j-api:${slf4j2Version}")

        // junit test
        testImplementation("junit:junit:${junit2Version}")
        testCompileOnly(lombok)
        testAnnotationProcessor(lombok)
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled false
    }
}

check.dependsOn jacocoTestReport
