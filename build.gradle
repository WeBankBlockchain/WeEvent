println("Notice: current gradle version is " + gradle.gradleVersion)

ext {
    // spring
    springVersion = "5.1.15.RELEASE"
    springMqttVersion = "5.1.11.RELEASE"
    // data.spring-data-commons
    springBootVersion = "2.1.14.RELEASE"
    // spring cloud
    springCloudVersion = "Greenwich.SR5"

    // ----- org.apache -----
    // zookeeper
    zookeeperVersion = "3.5.5"
    // httpclient
    httpclientVersion = "4.5.6"
    // tomcat
    tomcatVersion = "8.5.23"
    // commons
    apacheCommonsVersion = [
            lang3       : "3.6",
            jexl3       : "3.1",
            pool2       : "2.7.0",
            collections4: "4.1",
            dbcp2       : "2.6.0",
            commonsIo   : "2.4",
            fileupload  : "1.4"
    ]
    // org slf4j
    slf4jVersion = "1.7.30"
    // logging.log4j
    log4jVersion = "2.13.3"

    // org.fisco-bcos.web3sdk
    web3sdkVersion = [
            // fisco: "2.6.1.09271-rc1-SNAPSHOT"
            fisco: "2.7.0"
    ]
    // fabric
    fabricVersion = "1.4.4"
    // pb
    protobufVersion = "3.6.1"

    // lombok
    lombokVersion = "1.18.12"
    // junit
    junitVersion = "4.12"
    // netty-all
    nettyVersion = "4.1.44.Final"
    // jsonrpc
    jsonrpc4jVersion = "1.5.3"
    // JMS
    jmsVersion = "1.1"
    // Jmock
    jmockVersion = "1.9.0"
    // mybatis-spring-boot-starter
    mybatisVersion = "1.3.2"
    //h2
    h2Version = "1.4.196"
    // mariadb-java-client
    mariadbClientVersion = "2.3.0"
    // jsoup
    jsoupVersion = "1.9.2"
    // fastjson
    fastjsonVersion = "1.2.70"
    // quartz
    quartzVersion = "2.3.0"
    // Java-WebSocket
    WebSocketVersion = "1.4.0"
    // JWTVersion
    JWTVersion = "3.8.0"
    // MQTT paho client
    PahoClientVersion = "1.2.2"
    // jmeter
    jmeterVersion = "5.0"
    // jackson
    jacksonVersion = "2.11.2"

    commonsNetVersion = "3.6"

    bouncycastleVersion = "1.60"

}

buildscript {
    repositories {
     	mavenLocal()
        maven {
            url "http://maven.aliyun.com/nexus/content/groups/public/"
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.1.14.RELEASE")
        classpath("gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:2.1.0")
    }
}

List lombok = [
        "org.projectlombok:lombok:${lombokVersion}"
]

allprojects {
    group "com.webank.weevent"
    version "1.5.0"

    apply plugin: "java-library"
    apply plugin: "maven"
    apply plugin: "idea"
    apply plugin: "eclipse"
    apply plugin: "jacoco"

    // jdk version
    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    compileJava {
        options.compilerArgs << "-Xlint:unchecked"
    }

    repositories {
    	mavenLocal()
        // jms.jar
        maven { url "http://repository.jboss.org/nexus/content/groups/public/"}
        maven { url "http://maven.aliyun.com/nexus/content/groups/public/" }
        // "org.ethereum.solcJ-all-0.4.25"
        // maven { url "https://dl.bintray.com/ethereum/maven/" }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        mavenCentral()
        jcenter()
    }

    // encoding type
    [compileJava, compileTestJava, javadoc]*.options*.encoding = "UTF-8"

    sourceSets {
        main {
            java {
                srcDirs = ["src/main/java"]
            }
            resources {
                srcDirs = ["src/main/resources"]
            }
        }
        test {
            java {
                srcDirs = ["src/test/java"]
            }
            resources {
                srcDirs = ["src/test/resources"]
            }
        }
    }

    clean.doLast {
        file("dist/apps/").deleteDir()
        file("dist/conf/").deleteDir()
        file("dist/lib/").deleteDir()
    }

    configurations.all {
        // exclude spring-boot's default logger logback
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"

        resolutionStrategy {
            // fix security bug
            force "com.alibaba:fastjson:${fastjsonVersion}"
            // force "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
            // force use netty
            force "io.netty:netty-all:${nettyVersion}"
            force "org.apache.zookeeper:zookeeper:${zookeeperVersion}"
        }
    }

    // all project common lib
    dependencies {
        compileOnly(lombok)
        annotationProcessor(lombok)

        // apache commons
        implementation("org.apache.commons:commons-lang3:${apacheCommonsVersion.lang3}")
        implementation("org.apache.commons:commons-collections4:${apacheCommonsVersion.collections4}")

        // jackson
        implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
        implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
        implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")

        // slf4j logger
        implementation("org.slf4j:slf4j-api:${slf4jVersion}")

        // junit test
        testImplementation("junit:junit:${junitVersion}")
        testCompileOnly(lombok)
        testAnnotationProcessor(lombok)
    }
}

subprojects {
    dependencies {
        testImplementation 'org.junit.jupiter:junit-jupiter-api:5.2.0'
        testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.2.0'
    }
}

test {
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.5"
    reportsDir = file("$buildDir/customJacocoReportDir")
}


task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    subprojects.each {
        sourceSets((SourceSet) it.sourceSets["main"])
    }

    reports {
        xml.enabled true
        html.enabled true
        csv.enabled true
    }
}

codeCoverageReport.dependsOn {
    subprojects*.test
}