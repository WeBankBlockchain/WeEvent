apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

configurations {
    //exclude spring-boot's default logger logback
    all*.exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
}

dependencies {
    // spring boot
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-web")

    // spring boot with log4j2
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    // avoid "Log4j appears to be running in a Servlet environment, but there's no log4j-web module available."
    implementation("org.apache.logging.log4j:log4j-web:2.11.2")

    // account login
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-mail")

    // persist database
    implementation("org.apache.commons:commons-dbcp2:2.6.0")
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.2")
    implementation("org.mariadb.jdbc:mariadb-java-client")

    // jsoup
    implementation("org.jsoup:jsoup:1.9.2")

    // fast json
    implementation("com.alibaba:fastjson:1.2.58")

    // forward backend
    implementation("org.apache.httpcomponents:httpclient:4.5.2")

    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

bootJar {
    destinationDir file("dist/apps")
    archiveName project.name + "-" + version + ".jar"
    exclude "**/*.xml"
    exclude "**/*.properties"

    copy {
        from file("src/main/resources/")
        into "dist/conf"
    }
    copy {
        from configurations.runtime
        into "dist/lib"
    }
    copy {
        from file(".").listFiles().findAll {
            File f -> (f.name.endsWith(".sql") || f.name.endsWith(".sh") || f.name.endsWith(".env"))
        }
        into "dist"
    }

    copy {
        from file("web/html/")
        into "dist/html"
    }
}
