apply from: "${project.rootDir}/config.gradle"
apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

dependencies {
    // spring boot
    implementation("org.springframework.boot:spring-boot-starter:${springBoot2Version}")
    implementation("org.springframework.boot:spring-boot-starter-web:${springBoot2Version}")

    // spring boot with log4j2
    implementation("org.springframework.boot:spring-boot-starter-log4j2:${springBoot2Version}")
    // avoid "Log4j appears to be running in a Servlet environment, but there's no log4j-web module available."
    implementation("org.apache.logging.log4j:log4j-web:${logging2Version.log4j_web}")

    // account login
    implementation("org.springframework.boot:spring-boot-starter-security:${springBoot2Version}")
    implementation("org.springframework.boot:spring-boot-starter-mail:${springBoot2Version}")

    // persist databaseA
    implementation("org.apache.commons:commons-dbcp2:${commons2Version.dbcp2}")
    implementation("org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatis2Version}")
    implementation("org.mariadb.jdbc:mariadb-java-client:${mariadb2Version}")

    // jsoup
    implementation("org.jsoup:jsoup:${jsoup2Version}")

    // fast json
    implementation("com.alibaba:fastjson:1.2.58")

    // forward backend
    implementation("org.apache.httpcomponents:httpclient:${httpclient2Version}")

    testImplementation("org.springframework.boot:spring-boot-starter-test:${springBoot2Version}")
}

processResources {
    // DO NOT exclude properties for IDEA convenience
    //exclude { "**/**" }
}

bootJar {
    destinationDir file("dist/apps")
    archiveName project.name + "-" + version + ".jar"

    // thin spring boot jar
    excludes = ["*.jar"]

    copy {
        from file("src/main/resources/")
        into "dist/conf"
    }
    copy {
        from configurations.runtimeClasspath
        into "dist/lib"
    }
    copy {
        from file("web/html/")
        into "dist/html"
    }
}
