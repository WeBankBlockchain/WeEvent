module.exports = {
  header: {
    broker: 'Broker',
    group: 'Group',
    lang: 'English',
    version: 'Version',
    lastCommit: 'Last git commit',
    weEventVersion: "WeEvent's version",
    serverSetting: 'Broker setting',
    userSetting: 'User setting',
    login: 'Sign In',
    loginOut: 'Sign Out'
  },
  common: {
    back: 'Back',
    edit: 'Edit',
    delete: 'Delete',
    action: 'Action',
    ok: 'Ok',
    cancel: 'Cancel',
    name: 'Name',
    yes: 'Yes',
    no: 'No',
    addSuccess: 'Add Success',
    addFail: 'Add Failed',
    editSuccess: 'Edit Success',
    editFail: 'Edit Failed',
    deleteSuccess: 'Delete Success',
    deleteFail: 'Delete Failed',
    isDelete: 'Sure to delete it?',
    loading: 'loading ...',
    add: 'Add',
    search: 'Search',
    detail: 'Description',
    choose: 'Choose',
    operFail: 'Failed',
    examples: 'Examples: ',
    noData: 'Empty data',
    enter: 'Please input',
    reqException: 'Request exception',
    timeOut: 'Request timeout',
    all: 'all',
    noServer: 'Please input the servers'
  },
  serverSet: {
    serverMana: 'Server Management',
    serverName: 'Server Name',
    addServer: 'Add Server',
    editServer: 'Edit Server',
    brokerURLAddress: 'WeEvent Broker URL',
    webaseURLAddress: 'WeBASE URL',
    authorized: 'Authorized Account',
    ruleEngine: 'Eule Engine',
    namePlaceholder: 'Please input server name(1-20character,number,underline)',
    borkerPlaceholder: 'eg: "http://127.0.0.1:8080/weevent-brokers"',
    webasePlaceholder: 'eg: "http://127.0.0.1:8080/webase"',
    authorizedPlaceholder: 'Select Account',
    errorServer: 'Invalid server name',
    noServerName: 'Empty server name',
    emptyAddress: 'Invalid server URL',
    errorAddress: 'Can not connect to server',
    exitBrokerURL: 'Broker server is already existed, please apply for authorization from another user'
  },
  userSet: {
    userName: 'Account',
    passWord: 'Password',
    enterUserName: 'Please input account',
    quickRegistered: 'Sign Up',
    confirmPassWord: 'Confirm',
    newPassWord: 'New password',
    oldPassWord: 'Old password',
    enterPassWord: 'Please input password',
    enterAgain: 'Input Again',
    modify: 'Modify',
    hasAccount: 'Exist account, Sign In',
    registered: 'Register',
    regSuccess: 'Register success',
    regFail: 'Register failed',
    emptyUserName: 'Empty account name',
    errorUserName: '6~20 characters contains alpha and digital',
    exitUserName: 'Account exist',
    enterPassWordAgain: 'Please input confirm password',
    passWordInconsistent: 'Not same password',
    errorOldPassWord: 'Invalid old password',
    passWordModifySuccess: 'Change password success',
    mail: 'Email',
    emptyEail: 'Empty email',
    errorEail: 'Invalid email format',
    loginFail: 'Sign in failed',
    errorLogin: 'Account/Password is wrong，input again',
    forgetPassWord: 'Forget password?',
    login: 'Sign In',
    resetPassWord: 'Reset password',
    mailWarning: 'Notice: Reset password will send a confirm mail to the binding email',
    noUser: 'Account not exist',
    sendMailFail: 'Send Email failed',
    sendMailSuccess: 'Send Email success'
  },
  sideBar: {
    blockChainInfor: 'BlockChain',
    overview: 'Overview',
    transaction: 'Transactions',
    transactionDetial: 'Transaction List',
    nodeList: 'Nodes',
    topic: 'Topic',
    topicList: 'Topics',
    statistics: 'Event History',
    subcription: 'Current Subscription',
    engine: 'Streaming',
    ruleMana: 'Rule Engine',
    ruleDetail: 'Rule Detail',
    sources: 'DataBase Resources',
    timerSchedule: 'Timer Schedule',
    fileTranspoart: 'File Transpoart'
  },
  overview: {
    nodeNum: 'Nodes',
    blockNum: 'Blocks',
    transactionNum: 'Transactions',
    lastWeek: 'History published Events',
    essential: 'Monitor'
  },
  tableCont: {
    blockNumber: 'Block Height',
    transCount: 'Transaction',
    timestamp: 'Create Time',
    pkHash: 'Block Hash',
    transDetial: 'Transactions',
    copySuccess: 'Copy Success',
    transHash: 'Transaction Hash',
    nodeName: 'Node',
    state: 'Status',
    run: 'Run',
    stop: 'Stop',
    getDataError: 'Request failed',
    searchTopic: 'Please input topic',
    exitTopic: 'Topic is already existed',
    sequenceNumber: 'Published Events',
    newBlockNumber: 'Last Event’s Block',
    address: 'Topic Contract Address',
    creater: 'Create Account',
    addTopic: 'New topic',
    noName: 'Empty topic name',
    noMore: 'Topic name exceed 64 byte',
    errorTopicName: 'Invalid topic name',
    chooseTopic: 'Topic',
    chooseTime: 'Date',
    beginTime: 'Start timestamp',
    endTime: 'End timestamp',
    machine: 'Broker IP',
    subscribeId: 'SubscriptionID',
    remoteIp: 'Remote IP',
    interfaceType: 'Protocol',
    notifiedEventCount: 'Notified events',
    notifyingEventCount: 'Notifying events',
    createTimeStamp: 'Create timestamp',
    nodeType: 'Node Type',
    sealer: 'sealer',
    observer: 'observer',
    lastTimestamp: 'Last Update Time'
  },
  rule: {
    dataGuide: 'User Guide',
    useText: 'Tutorials',
    creatNewRule: 'New Rule',
    creatRule: 'Create Rule',
    editRule: 'Edit Rule',
    addOperation: 'Add Operation',
    checkRule: 'Check Rule',
    startRule: 'Start Rule',
    ruleList: 'Rule List',
    creatNow: 'Create Now',
    enterRuleName: 'Please input rule name',
    ruleName: 'Rule Name',
    payloadType: 'Format',
    payloadMap: 'Event Payload Samples',
    ruleDescription: 'Rule Description',
    run: 'Running',
    notRun: 'Init',
    start: 'Start',
    stop: 'Stop',
    read: 'View',
    delete: 'Delete',
    creatRuleRemark: 'What is a rule: a real-time calculation process. Support users to subscribe to a message from a topic in a custom way, perform data filtering, conversion and other operations, and automatically publish data to other topics or write to the database. For the time being, only data streams in JSON format are supported.',
    dataType: 'Data type',
    enterPayload: 'Please input event payload sample,Examples:{"name":"kevin","age": 20}',
    commit: 'Commit',
    errorType: 'Invalid format',
    isStart: 'Started',
    startFail: 'Start failed',
    isStop: 'Stopped',
    isDelete: 'Sure to delete?',
    deleteRule: 'Delete Rule',
    hasDelete: 'Deleted',
    creatSuccess: 'Create success',
    creatFail: 'Create fail',
    ruleDataBaseId: 'JDBC Resources',
    addAddress: 'New Database',
    addJDBCAddress: 'Add JDBC',
    editJDBCAddress: 'Edit JDBC',
    JDBCinfor: 'JDBC Information',
    enterDB: 'Please input database JDBC URL',
    JDBCname: 'JDBC Name',
    JDBCIP: 'JDBC IP',
    JDBCport: 'JDBC Port',
    JDBCDatabaseName: 'Database',
    JDBCdatabaseUrl: 'DatabaseUrl',
    JDBCusername: 'Username',
    JDBCpassword: 'Password',
    tableName: 'Table Name',
    errorTable: 'Can not connect to the table in selected baseData',
    inputTableName: 'Please input the table Name in selected baseData',
    optionalParameter: 'Optional',
    enterJDBCname: 'Please input database JDBC Name',
    enterJDBCIP: 'Please input database JDBC IP',
    enterJDBCport: 'Please input database JDBC Port',
    enterJDBCDatabaseName: 'Please input Database Name',
    enterJDBCDatabaseUrl: 'Please input Database Url',
    enterJDBCusername: 'Please input database Username',
    enterJDBCpassword: 'Please input database Password',
    enterTableName: 'Please input database Table Name',
    enditAddress: 'Edit Database',
    deleteAddress: 'Delete database?',
    checkJDBC: 'Check JDBC',
    connectSuccess: 'JDBC Connect Success',
    connectFailed: 'JDBC Connect Failed',
    databaseType: 'Databae Type',
    connectTimeOut: 'Please check the operations of database',
    errorPayLoad: 'please do not delete or change the type of key that had been using'
  },
  ruleDetail: {
    guideDetail: 'Data Guide Detail',
    ruleInfo: 'Rule Info',
    editRule: 'Edit Rule',
    processData: 'Rule Detail',
    sqlDescription: 'Grammar instructions',
    ruleDetail: 'Rule Detail',
    noRule: 'Empty rule detail',
    ruleSearchLetter: 'Rule expression',
    ruleSearchWarning: 'Rule Search Warning',
    letter: 'Fields',
    dataCirculat: 'Streaming Target',
    abnormalData: 'Exception',
    condition: 'Filter Condition',
    nocondition: 'please set filter condition',
    completeLetter: 'Unfinished',
    forwardData: 'Target',
    forwardOption: 'Forward while exception',
    dataDestination: 'Destination',
    selectOperation: 'Select Operation',
    selectGuide: 'Please select a destination',
    toTopic: 'Target To Topic',
    toDB: 'Target To DB',
    errorTopic: 'Select Topic',
    db: 'Database',
    selectDB: 'Select Database',
    guideURL: 'No Target',
    setGuide: 'Setting',
    guideAddress: 'Empty database',
    abnormalAddress: 'Empty error database',
    cannotSame: 'Cannot same with Streaming Target'
  },
  ruleStatic: {
    readRule: 'Read Rules',
    readInsideRule: 'System Rules',
    systemRules: 'System Rules',
    ruleName: 'Rule Name',
    hitTimes: 'Hit Times',
    notHitTimes: 'Hit Failed Times',
    successTimes: 'Successful Times',
    failTimes: 'Failed Times',
    startTime: 'Start Time',
    readFailRecord: 'Read Record',
    lastRecord: 'Last Time',
    runningStatus: 'Running Status',
    destinationType: 'Destination Type'
  },
  ruleCheck: {
    inputRule: 'please input completed rule',
    notNumber: 'data type error - not a number',
    inputInteger: 'data type error - not an integer',
    bigger: 'please input the value bigger then 0',
    inputString: 'please warp the string in double quotes',
    errorOperator: 'operator is error please use != or ==',
    errorParameter: 'function error - parameter is error',
    errorIndex: 'function error - index is not a integer',
    typeErrorString: 'Type error - the type of key is String different with input value',
    typeErrorNumber: 'Type error - the type of key is Number different with input value',
    typeTimeError: 'Use this function, the value of key should be a time(hh:mm:ss type)',
    typeDateError: 'Use this function, the value of key should be a time(YYYY-MM-DD type)',
    errorTime: 'Use this function, the value of key should be a time("YYYY-MM-DD hh:mm:ss" type)',
    columnMarkError: 'Use this function, the selected datas should be string type',
    notAdate: 'The value of selected data is a error date',
    notAtime: 'The value of selected data is a error time'
  },
  timerSchedule: {
    schedulerName: 'Scheduler Name',
    databaseUrl: 'DatabaseUrl',
    periodParams: 'DeriodParams',
    parsingSql: 'Parsing Letter',
    addScheduler: 'Add Scheduler',
    editScheduler: 'Edit Scheduler',
    noDbList: 'No Database list',
    enterSN: 'please input Scheduler Name',
    enterPP: 'please input Period Params',
    enterSQL: 'please input Parsing Sql',
    selectDB: 'please Select Database',
    errorCorn: 'Error Period Params'
  },
  ruleDes: {
    conditionDes: 'Conditional tatement description',
    desTitle: 'By filtering the condition bar on the operation page, the user can generate the corresponding rule trigger condition in the SQL statement',
    creatOption: 'Create conditional statement',
    creatOptionDes: 'Click the "Add" button on the right to generate a blank conditional statement column, and click multiple times to add multiple items. The conditional statements are spliced by the relationship characters "and" "or"',
    editOption: 'Edit conditional statement',
    editOptionDes: 'The user can select the corresponding key and set its corresponding content interval. At the same time, it supports the selection of built-in functions (optional) to perform corresponding function processing on the key.<br/>E.g: abs(age) >= 20',
    optionMap: 'Conditional structure content editing',
    optionMapDes: 'For complex conditional statements, the page now supports not only the horizontal association of conditional statements, but also the nesting of conditional statements Click the "Add" button at the end of each condition bar to generate a corresponding sub-option bar. Changing the option bar will form a nesting relationship with its parent<br/>E.g: (abs(age) >= 20 and name != "Kevin") or age >= 30'
  },
  file: {
    addOne: 'New File Transmission',
    boundTopic: 'Bound Topic',
    creatTime: 'Creat Time',
    creater: 'Creater',
    roles: 'Roles',
    options: 'Options',
    sender: 'Sender',
    receiver: 'Receiver',
    upload: 'Upload',
    download: 'Download',
    publicKey: 'Public Key',
    privateKey: 'Private Key',
    isDelete: 'Delete Topic',
    deleteTopic: 'Sure to delete?',
    uploadList: 'Upload List',
    noFile: 'No Data',
    overwrite: 'Cover Files?',
    transpoartList: 'Transpoart List',
    certified: 'Certified',
    uncertified: 'Uncertified',
    certification: 'Certification',
    fileName: 'File Name',
    downloadFile: 'Download',
    downloadList: 'Download List',
    fileuploadList: 'File Upload List',
    fileCover: 'Cover File',
    generatePPK: 'Generate public and private keys',
    createFileTopic: 'Please create a file channel first'
  }
}
