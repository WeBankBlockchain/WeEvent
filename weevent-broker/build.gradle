apply plugin: "org.springframework.boot"
apply plugin: "io.spring.dependency-management"

dependencies {
    // spring boot
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-starter-web")

    // spring boot with log4j2
    implementation("org.springframework.boot:spring-boot-starter-log4j2")
    // avoid "Log4j appears to be running in a Servlet environment, but there's no log4j-web module available."
    implementation("org.apache.logging.log4j:log4j-web:2.11.2")

    // stomp
    implementation("org.springframework.boot:spring-boot-starter-websocket")

    // mqtt
    implementation("org.springframework.integration:spring-integration-mqtt")

    // json rpc, https://mvnrepository.com/artifact/com.github.briandilley.jsonrpc4j/jsonrpc4j
    implementation("com.github.briandilley.jsonrpc4j:jsonrpc4j:1.5.3")

    // zookeeper 3.5.5 is first stable version support netty 4.1
    implementation("org.apache.zookeeper:zookeeper:3.5.5") {
        exclude group: "org.slf4j", module: "slf4j-log4j12"
    }
    // curator prefer zookeeper 3.5
    // http://curator.apache.org/zk-compatibility.html
    implementation("org.apache.curator:curator-recipes:4.2.0")

    // redis
    implementation("redis.clients:jedis:3.0.0")

    // web3sdk 2.0
    implementation("org.fisco-bcos:web3sdk:2.0.7") {
        // conflict with io.netty:netty-all:4.1.15.Final in web3sdk 1.3
        // io.netty:netty-tcnative-boringssl-static:2.0.20.Final crash
        exclude group: "io.netty"
        // compile solidity
        exclude group: "org.ethereum", module: "solcJ-all"
    }
    // web3sdk 1.3
    implementation("org.fisco-bcos:web3sdk-weevent:1.2.7") {
        exclude group: "org.slf4j", module: "slf4j-log4j12"
        exclude group: "org.springframework"
    }

    // depend project
    implementation project(path: ":weevent-client")


    testImplementation("org.springframework.boot:spring-boot-starter-test")
    // JMS sample
    testImplementation("javax.jms:jms:1.1")
}

bootJar {
    destinationDir file("dist/apps")
    archiveName project.name + "-" + version + ".jar"

    exclude "**/*.xml"
    exclude "**/*.properties"

    copy {
        from file("src/main/resources/")
        into "dist/conf"
    }
    copy {
        from configurations.runtime
        into "dist/lib"
    }
}
